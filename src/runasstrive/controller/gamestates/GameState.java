package runasstrive.controller.gamestates;

import runasstrive.view.parameters.Parameter;
import runasstrive.view.parameters.ParameterBundle;
import runasstrive.model.RunasStrive;
import runasstrive.view.resources.Messages;

import java.util.List;

/**
 * This class represents an abstract game state which is
 * similar to states of a finite state machine. Each game
 * state holds a reference to the next game state class which
 * is determined dynamically at runtime depending on the
 * player's actions and game events. The class serves as
 * a super class for all such game states.
 *
 * @author ugget
 * @version 1.0
 */
public abstract class GameState {

    /**
     * A constant used to translate the io index starting at 1 to an index starting at 0.
     */
    protected static final int CARD_INDEX_OFFSET = 1;

    /**
     * the instance of the {@link RunasStrive} object referenced
     * by all game states in order to execute the appropriate methods
     */
    protected final RunasStrive runasStrive;

    /**
     * the output generated by the game depending on previous player
     * actions and game events such as fighting or advancing to higher
     * levels
     */
    protected String response;

    /**
     * the class of the next game state
     */
    protected Class<? extends GameState> nextGameState;

    /**
     * This method serves as a super constructor for all objects
     * inheriting from GameState
     *
     * @param runasStrive the instance of the {@link RunasStrive} object used by all
     *                    game states
     */
    protected GameState(RunasStrive runasStrive) {
        this.runasStrive = runasStrive;
    }

    /**
     * This method represents an entire game state execution from the interaction with
     * {@link RunasStrive} to setting the response accordingly.
     *
     * @param parameterBundle holds all required {@link Parameter} objects for the game state
     * @return a boolean based on whether the execution was successful or failed
     * at any point
     */
    public boolean execute(ParameterBundle parameterBundle) {
        if (interact(parameterBundle)) {
            setNextGameState();
            setResponse();
            return true;
        }
        return false;
    }

    /**
     * This method returns the generated response of the game state as a {@code String}.
     * @return the response
     */
    public String getResponse() {
        return this.response;
    }

    /**
     * This method returns the class of the next game state.
     *
     * @return the next game state's class
     */
    public Class<? extends GameState> getNext() {
        return this.nextGameState;
    }

    /**
     * This method returns the input prompt specified by the game state.
     *
     * @return the input prompt as a {@code String}
     */
    public abstract String getPrompt();

    /**
     * This method returns the input prompt that should get printed
     * in case that the previous input was invalid.
     *
     * @return the input prompt as a {@code String} that should get repeated
     */
    public abstract String repeatPrompt();

    /**
     * @return the required Parameter
     */
    public abstract Parameter<?> getParameter();

    /**
     * This method serves as a utility method to create a {@code String} o
     * representing a list of choices.
     *
     * @param toList a list of objects that should be listed
     * @return the string representing the list of choices
     */
    protected String list(List<?> toList) {
        final StringBuilder listBuilder = new StringBuilder();
        toList.forEach(entry -> {
            final int index = toList.indexOf(entry);
            final String el = toList.get(index).toString();
            listBuilder
                    .append(String.format(Messages.LIST_ELEMENT, index + CARD_INDEX_OFFSET, el))
                    .append(System.lineSeparator());
        });
        return listBuilder.toString().trim();
    }

    /**
     * This method performs the interaction with {@link RunasStrive} using the given input
     * parameters.
     *
     * @param parameterBundle holds all required parameters for the game state
     * @return a boolean based on whether the interaction with the given input was performed
     * successfully
     */
    protected abstract boolean interact(ParameterBundle parameterBundle);

    /**
     * This method sets the next game state based on the previous interaction with {@link RunasStrive}.
     */
    protected abstract void setNextGameState();

    /**
     * This method sets the response based on the previous interaction with {@link RunasStrive}.
     */
    protected abstract void setResponse();
}
